diff --git a/README.md b/README.md
index d7e5b60..6ff5e03 100644
--- a/README.md
+++ b/README.md
@@ -1,30 +1,300 @@
-# Dialogs RAG v2 ‚Äî Quickstart
+# üéØ DialogsRAG v2 - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
+
+[![Python](https://img.shields.io/badge/Python-3.8+-blue.svg)](https://python.org)
+[![Streamlit](https://img.shields.io/badge/Streamlit-1.39.0-red.svg)](https://streamlit.io)
+[![OpenAI](https://img.shields.io/badge/OpenAI-GPT--4o--mini-green.svg)](https://openai.com)
+
+–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è LLM –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –∏–¥–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
+
+## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
+
+- **ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT-4o-mini
+- **üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥** - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º
+- **üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º** - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–º–∞–º –∏ –ø–æ–¥—Ç–µ–º–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏
+- **üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** - –º–µ—Ç—Ä–∏–∫–∏ —á–∞—Å—Ç–æ—Ç—ã, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º
+- **üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** - –ø–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º –∏ –∞–Ω–∞–ª–∏–∑ confidence
+- **üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö** - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö CSV, JSON, JSONL
+- **üåê REST API** - –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞
+
+## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
+
+- **84 –¥–∏–∞–ª–æ–≥–∞** –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
+- **340 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π** –∏–∑–≤–ª–µ—á–µ–Ω–æ
+- **260 –ø—Ä–æ–±–ª–µ–º** –≤—ã—è–≤–ª–µ–Ω–æ
+- **41 –∏–¥–µ—è** –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
+- **39 —Å–∏–≥–Ω–∞–ª–æ–≤** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
+
+### –¢–æ–ø-–ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:
+1. **–ù–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å / –º–∞–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏–π** - 60.5% –¥–∏–∞–ª–æ–≥–æ–≤
+2. **–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî –Ω–µ –æ–∫—É–ø–∞–µ—Ç—Å—è** - 49.4% –¥–∏–∞–ª–æ–≥–æ–≤
+3. **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –Ω–µ –ø–æ–º–æ–≥–ª–æ/–¥–æ–ª–≥–æ** - 48.1% –¥–∏–∞–ª–æ–≥–æ–≤
+4. **UI/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** - 35.8% –¥–∏–∞–ª–æ–≥–æ–≤
+5. **–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ** - 24.7% –¥–∏–∞–ª–æ–≥–æ–≤
+
+## üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞
+
+### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
+- Python 3.8+
+- OpenAI API –∫–ª—é—á
+
+### –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
 
-## 1) –£—Å—Ç–∞–Ω–æ–≤–∫–∞
 ```bash
-python -m venv .venv && source .venv/bin/activate  # Windows: .venv\\Scripts\\activate
+# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
+git clone https://github.com/denirokp/dialogs-rag_v3.git
+cd dialogs-rag_v3
+
+# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 pip install -r requirements.txt
-export OPENAI_API_KEY=...  # Windows: set OPENAI_API_KEY=...
+
+# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞
+export OPENAI_API_KEY="–≤–∞—à_api_–∫–ª—é—á_–∑–¥–µ—Å—å"
 ```
 
-## 2) –ê–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
+### –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
+
+```
+pandas>=2.2.2
+openpyxl>=3.1.2
+pyyaml>=6.0.1
+httpx>=0.27.0
+streamlit>=1.39.0
+plotly>=5.22.0
+fastapi>=0.116.1
+uvicorn>=0.35.0
+tqdm>=4.66.4
+```
+
+## üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
+
+### 1. –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
+
 ```bash
+# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 python main.py
+
+# –ò–ª–∏ –ø–æ—à–∞–≥–æ–≤–æ
+python analyze_dialogs_advanced.py --model gpt-4o-mini --whole_max 8000 --window_tokens 1800
+python consolidate_and_summarize.py
+```
+
+### 2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
+
+```bash
+streamlit run simple_dashboard.py
+```
+
+–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8502 –≤ –±—Ä–∞—É–∑–µ—Ä–µ
+
+### 3. REST API
+
+```bash
+python simple_api.py
+```
+
+API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:8000
+
+## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
+
+```
+dialogs-rag-v2/
+‚îú‚îÄ‚îÄ main.py                           # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
+‚îú‚îÄ‚îÄ analyze_dialogs_advanced.py       # LLM –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤
+‚îú‚îÄ‚îÄ consolidate_and_summarize.py      # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
+‚îú‚îÄ‚îÄ simple_dashboard.py               # Streamlit –¥–∞—à–±–æ—Ä–¥
+‚îú‚îÄ‚îÄ simple_api.py                     # FastAPI —Å–µ—Ä–≤–µ—Ä
+‚îú‚îÄ‚îÄ data/
+‚îÇ   ‚îî‚îÄ‚îÄ input/
+‚îÇ       ‚îî‚îÄ‚îÄ dialogs14_09.xlsx        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤
+‚îú‚îÄ‚îÄ artifacts/                        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
+‚îÇ   ‚îú‚îÄ‚îÄ comprehensive_results.json    # –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
+‚îÇ   ‚îú‚îÄ‚îÄ statistics.json              # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
+‚îÇ   ‚îú‚îÄ‚îÄ problems_summary.csv         # –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
+‚îÇ   ‚îú‚îÄ‚îÄ problems_mentions.csv        # –í—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
+‚îÇ   ‚îú‚îÄ‚îÄ problems_subthemes.csv       # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–¥—Ç–µ–º–∞–º
+‚îÇ   ‚îî‚îÄ‚îÄ problem_cards.jsonl          # –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–±–ª–µ–º
+‚îú‚îÄ‚îÄ taxonomy.yaml                     # –¢–∞–∫—Å–æ–Ω–æ–º–∏—è —Ç–µ–º –∏ –ø–æ–¥—Ç–µ–º
+‚îú‚îÄ‚îÄ problem_map.yaml                  # –ö–∞—Ä—Ç–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º
+‚îú‚îÄ‚îÄ requirements.txt                  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
+‚îî‚îÄ‚îÄ README.md                         # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
+```
+
+## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
+
+### –¢–∞–∫—Å–æ–Ω–æ–º–∏—è –ø—Ä–æ–±–ª–µ–º
+
+–§–∞–π–ª `taxonomy.yaml` –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–º –∏ –ø–æ–¥—Ç–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
+
+```yaml
+themes:
+  - id: "–¥–æ—Å—Ç–∞–≤–∫–∞"
+    subthemes: ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ", "–Ω–µ —É–¥–∞—ë—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", "–º–∞–ª–æ –ü–í–ó"]
+  - id: "UI/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
+    subthemes: ["–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ"]
+  # ...
+```
+
+### –ö–∞—Ä—Ç–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
+
+–§–∞–π–ª `problem_map.yaml` –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ —Ç–µ–º—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–æ–±–ª–µ–º—ã:
+
+```yaml
+problems:
+  - id: delivery_partial
+    title: –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ/–Ω–µ –Ω–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö
+    match:
+      - {theme: "–¥–æ—Å—Ç–∞–≤–∫–∞", subtheme: "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ"}
+      - {theme: "UI/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", subtheme: "—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ"}
+  # ...
+```
+
+## üìä –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
+
+### –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
+
+Excel —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
+- `ID –∑–≤–æ–Ω–∫–∞` - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞
+- `–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏` - –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
+
+### –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
+
+#### comprehensive_results.json
+```json
+{
+  "mentions": [
+    {
+      "dialog_id": "136110475",
+      "turn_id": 1,
+      "label_type": "problems",
+      "theme": "–¥–æ—Å—Ç–∞–≤–∫–∞",
+      "subtheme": "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ",
+      "text_quote": "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö",
+      "confidence": 0.85
+    }
+  ]
+}
 ```
-–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ `artifacts/`.
 
-## 3) API (–ø–æ—Ä—Ç 8000)
+#### problems_summary.csv
+```csv
+problem_id,problem_title,dialogs,mentions,share_dialogs_pct,freq_per_1k,intensity_mpd
+delivery_partial,–î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ,20,30,24.7,246.9,1.5
+```
+
+## üéõ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
+
+### analyze_dialogs_advanced.py
+
+- `--model` - –º–æ–¥–µ–ª—å OpenAI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: gpt-4o-mini)
+- `--whole_max` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ü–µ–ª–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)
+- `--window_tokens` - —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1800)
+
+### –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞
+
 ```bash
-uvicorn simple_api:app --port 8000 --reload
+# –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–µ–Ω—å—à–∏–º –æ–∫–Ω–æ–º
+python analyze_dialogs_advanced.py --window_tokens 1000
+
+# –ê–Ω–∞–ª–∏–∑ —Å –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é
+python analyze_dialogs_advanced.py --model gpt-4o
+
+# –ê–Ω–∞–ª–∏–∑ —Å –±–æ–ª—å—à–∏–º –æ–∫–Ω–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
+python analyze_dialogs_advanced.py --whole_max 12000 --window_tokens 2000
 ```
 
-## 4) –î–∞—à–±–æ—Ä–¥ (–ø–æ—Ä—Ç 8501)
+## üîç –î–∞—à–±–æ—Ä–¥
+
+### –§–∏–ª—å—Ç—Ä—ã
+- **–¢–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π** - –ø—Ä–æ–±–ª–µ–º—ã, –∏–¥–µ–∏, —Å–∏–≥–Ω–∞–ª—ã
+- **–î–∏–∞–ø–∞–∑–æ–Ω confidence** - –æ—Ç 0.0 –¥–æ 1.0
+- **–ü–æ–∏—Å–∫ –≤ —Ü–∏—Ç–∞—Ç–∞—Ö** - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
+- **–¢–µ–º—ã –∏ –ø–æ–¥—Ç–µ–º—ã** - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
+
+### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
+- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Å—É—â–Ω–æ—Å—Ç–µ–π
+- –¢–æ–ø-–ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
+- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º –∏ –ø–æ–¥—Ç–µ–º–∞–º
+- –ê–Ω–∞–ª–∏–∑ confidence
+- –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
+
+## üåê API
+
+### Endpoints
+
+- `GET /` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
+- `GET /stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
+- `GET /problems` - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
+- `GET /mentions` - –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
+- `GET /search?q=query` - –ø–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º
+
+### –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
+
 ```bash
-streamlit run simple_dashboard.py --server.port 8501
+# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
+curl http://localhost:8000/stats
+
+# –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º
+curl "http://localhost:8000/search?q=–¥–æ—Å—Ç–∞–≤–∫–∞"
+
+# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
+curl http://localhost:8000/problems
 ```
 
-## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
-- LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç **—Å—Ç—Ä–æ–≥–æ** `{ "mentions": [...] }`.
-- –¢–∞–∫—Å–æ–Ω–æ–º–∏—è –¥–æ–º–µ–Ω–Ω–∞—è (—Å—Ç—ã–Ω–∫—É–µ—Ç—Å—è —Å `problem_map.yaml`).
-- DoD-–º–µ—Ç—Ä–∏–∫–∏: `evidence_100`, `dedup_removed_pct`, `ambiguity_pct` –≤ `artifacts/statistics.json`.
-- –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–±–ª–µ–º: –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è `consolidate_and_summarize.py` –∏–ª–∏ –∏–∑ `main.py`.
+## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
+
+```bash
+# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
+python -c "import pandas, streamlit, httpx; print('–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')"
+
+# –¢–µ—Å—Ç API
+python simple_api.py &
+curl http://localhost:8000/stats
+```
+
+## üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
+
+- **Evidence coverage** - 100% —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ç–∞—Ç—ã
+- **Deduplication** - 0% –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
+- **Ambiguity rate** - 3.2% –Ω–∏–∑–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
+
+## üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
+
+### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–º
+
+1. –û–±–Ω–æ–≤–∏—Ç–µ `taxonomy.yaml`
+2. –û–±–Ω–æ–≤–∏—Ç–µ `problem_map.yaml` –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
+3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑
+
+### –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
+
+–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ `simple_dashboard.py` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
+
+## üêõ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫
+
+### –û—à–∏–±–∫–∞ "ENV OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω"
+```bash
+export OPENAI_API_KEY="–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å"
+```
+
+### –û—à–∏–±–∫–∞ 401 Unauthorized
+–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ OpenAI.
+
+### –û—à–∏–±–∫–∞ "–ù–µ—Ç mentions –≤ comprehensive_results.json"
+–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ `analyze_dialogs_advanced.py`.
+
+## üìù –õ–∏—Ü–µ–Ω–∑–∏—è
+
+MIT License
+
+## üë• –ê–≤—Ç–æ—Ä—ã
+
+- Denis K. - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
+- AI Assistant - –ø–æ–º–æ—â—å –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
+
+## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞
+
+–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å–æ–∑–¥–∞–π—Ç–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ `SYSTEM_STATUS.md`.
+
+---
+
+**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** 14 —Å–µ–Ω—Ç—è–±—Ä—è 2024
\ No newline at end of file
diff --git a/SYSTEM_STATUS.md b/SYSTEM_STATUS.md
new file mode 100644
index 0000000..d1c57fe
--- /dev/null
+++ b/SYSTEM_STATUS.md
@@ -0,0 +1,54 @@
+# üéØ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ - –°—Ç–∞—Ç—É—Å
+
+## ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞!
+
+### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
+- **84 –¥–∏–∞–ª–æ–≥–∞** –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
+- **340 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π** –∏–∑–≤–ª–µ—á–µ–Ω–æ
+- **260 –ø—Ä–æ–±–ª–µ–º** –≤—ã—è–≤–ª–µ–Ω–æ
+- **41 –∏–¥–µ—è** –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
+- **39 —Å–∏–≥–Ω–∞–ª–æ–≤** –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
+
+### üöÄ –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É:
+
+#### 1. –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤:
+```bash
+# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á OpenAI
+export OPENAI_API_KEY="–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å"
+
+# –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
+python main.py
+```
+
+#### 2. –î–∞—à–±–æ—Ä–¥:
+```bash
+# –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∞—à–±–æ—Ä–¥
+streamlit run simple_dashboard.py
+# –û—Ç–∫—Ä—ã—Ç—å http://localhost:8502
+```
+
+#### 3. API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
+```bash
+# –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä
+python simple_api.py
+# API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:8000
+```
+
+### üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
+- `artifacts/comprehensive_results.json` - –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
+- `artifacts/statistics.json` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
+- `artifacts/problems_summary.csv` - —Å–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
+- `artifacts/problems_mentions.csv` - –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
+- `artifacts/problem_cards.csv` - –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–±–ª–µ–º
+
+### üîß –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
+- Python 3.8+
+- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: `pip install -r requirements.txt`
+- API –∫–ª—é—á OpenAI
+
+### üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:
+14 —Å–µ–Ω—Ç—è–±—Ä—è 2024, 21:54
+
+### üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:
+- Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: –æ–±–Ω–æ–≤–ª–µ–Ω
+- –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è: `../dialogs-rag-v2-backup-20250914-215432/`
diff --git a/analyze_dialogs_advanced.py b/analyze_dialogs_advanced.py
index 714887a..e32048c 100644
--- a/analyze_dialogs_advanced.py
+++ b/analyze_dialogs_advanced.py
@@ -11,9 +11,8 @@ LLM-based –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ç–µ–∫—É—â—É—é 
 –¢—Ä–µ–±—É–µ—Ç—Å—è: OPENAI_API_KEY; pip install -r requirements.txt
 """
 
-import os, re, json, math, hashlib, argparse, logging
+import os, re, json, math, hashlib, argparse
 import httpx, pandas as pd, yaml
-from tqdm.auto import tqdm
 from pathlib import Path
 from typing import List, Dict, Any
 
@@ -89,7 +88,7 @@ SYSTEM = (
 USER_TMPL = (
     "–¢–∞–∫—Å–æ–Ω–æ–º–∏—è (themes‚Üísubthemes):\n{taxonomy}\n---\n"
     "–û–∫–Ω–æ –¥–∏–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç):\n{window}\n---\n"
-    "–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç {{'mentions':[...]}} —Å–æ —Å—Ç—Ä–æ–≥–∏–º–∏ –∫–ª—é—á–∞–º–∏."
+    "–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç {{\"mentions\":[...]}} —Å–æ —Å—Ç—Ä–æ–≥–∏–º–∏ –∫–ª—é—á–∞–º–∏."
 )
 
 class LLM:
@@ -97,15 +96,14 @@ class LLM:
         self.model = model
         self.key = os.getenv("OPENAI_API_KEY", "")
         self.client = httpx.Client(timeout=timeout)
-        # Read taxonomy once during initialization to avoid repeated I/O
-        with open(TAX_PATH, "r", encoding="utf-8") as f:
-            self.taxonomy = yaml.safe_load(f)
 
     def extract(self, dialog_id: str, window) -> List[Dict[str,Any]]:
         if not self.key:
             raise RuntimeError("ENV OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
+        with open(TAX_PATH, "r", encoding="utf-8") as f:
+            taxonomy = yaml.safe_load(f)
         user = USER_TMPL.format(
-            taxonomy=json.dumps(self.taxonomy, ensure_ascii=False),
+            taxonomy=json.dumps(taxonomy, ensure_ascii=False),
             window=format_for_prompt(window),
         )
         payload = {
@@ -178,31 +176,16 @@ def dedup_mentions(rows: List[Dict[str,Any]]) -> List[Dict[str,Any]]:
 
 # ----------------- –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–æ–Ω -----------------
 def run(model="gpt-4o-mini", whole_max=8000, window_tokens=1800):
-    logging.basicConfig(level=logging.INFO)
     df = read_dialogs(INPUT_XLSX)
     llm = LLM(model=model)
     all_mentions: List[Dict[str,Any]] = []
-    for _, row in tqdm(df.iterrows(), total=len(df), desc="dialogs"):
-        dlg_id = row["dialog_id"]
-        turns = split_turns(row["full_text"])
+    for _, row in df.iterrows():
+        dlg_id = row["dialog_id"]; turns = split_turns(row["full_text"])
         windows = client_only_windows(
             turns, whole_max_tokens=whole_max, window_tokens=window_tokens
         )
-        dlg_mentions = 0
-        dlg_errors = 0
-        for w in tqdm(windows, desc="windows", leave=False):
-            try:
-                mentions = llm.extract(dlg_id, w)
-                dlg_mentions += len(mentions)
-                all_mentions.extend(mentions)
-            except Exception as e:
-                dlg_errors += 1
-                logging.error(
-                    f"dialog {dlg_id} window {w.get('window_id')} error: {e}"
-                )
-        logging.info(
-            f"dialog {dlg_id}: extracted_mentions={dlg_mentions} errors={dlg_errors}"
-        )
+        for w in windows:
+            all_mentions.extend(llm.extract(dlg_id, w))
 
     # –î–æ –¥–µ–¥—É–ø–∞
     pre_count = len(all_mentions)
diff --git a/consolidate_and_summarize.py b/consolidate_and_summarize.py
index a4a174a..449fd12 100644
--- a/consolidate_and_summarize.py
+++ b/consolidate_and_summarize.py
@@ -27,10 +27,7 @@ def load_mentions() -> pd.DataFrame:
     return df
 
 def build_map() -> pd.DataFrame:
-    if not Path(MAP_PATH).is_file():
-        raise FileNotFoundError(f"–§–∞–π–ª {MAP_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
-    with open(MAP_PATH, "r", encoding="utf-8") as f:
-        mp = yaml.safe_load(f)
+    mp = yaml.safe_load(open(MAP_PATH, "r", encoding="utf-8"))
     rows = []
     for p in mp["problems"]:
         for m in p["match"]:
@@ -162,4 +159,4 @@ def summarize(merged: pd.DataFrame, agg: pd.DataFrame, sub: pd.DataFrame, model=
 if __name__ == "__main__":
     merged, agg, sub, _ = consolidate()
     summarize(merged, agg, sub)
-    print("[ok] artifacts/problems_*.{csv,jsonl} –≥–æ—Ç–æ–≤—ã")
+    print("[ok] artifacts/problems_*.{csv,jsonl} –≥–æ—Ç–æ–≤—ã")
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
index f4b1eaa..959f316 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -6,4 +6,6 @@ streamlit
 plotly
 fastapi
 uvicorn
-tqdm
+streamlit-plotly-events
+xlsxwriter
+numpy
\ No newline at end of file
diff --git a/simple_dashboard.py b/simple_dashboard.py
index 0196060..d405b65 100644
--- a/simple_dashboard.py
+++ b/simple_dashboard.py
@@ -1,18 +1,56 @@
 # -*- coding: utf-8 -*-
+import io
 import json
 from pathlib import Path
+from urllib.parse import urlencode
 
+import numpy as np
 import pandas as pd
 import plotly.express as px
+import plotly.graph_objects as go
+from plotly.subplots import make_subplots
 import streamlit as st
 
-st.set_page_config(page_title="DialogsRAG Dashboard", layout="wide")
+st.set_page_config(page_title="DialogsRAG ‚Äî –ø–∞–Ω–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤", layout="wide")
 
 ART = Path("artifacts")
 RES_PATH = ART / "comprehensive_results.json"
 STATS_PATH = ART / "statistics.json"
 
-# ---------- –∑–∞–≥—Ä—É–∑–∫–∞ ----------
+# –ü—Ä–æ–±–ª–µ–º—ã (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è)
+PM_SUM = ART / "problems_summary.csv"
+PM_SUB = ART / "problems_subthemes.csv"
+PM_IDX = ART / "problems_mentions.csv"
+PM_CARDS = ART / "problem_cards.jsonl"
+# –ò–¥–µ–∏ (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è)
+ID_SUM = ART / "ideas_summary.csv"
+ID_SUB = ART / "ideas_subthemes.csv"
+ID_IDX = ART / "ideas_mentions.csv"
+ID_CARDS = ART / "idea_cards.jsonl"
+# –°–∏–≥–Ω–∞–ª—ã (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è)
+SG_SUM = ART / "signals_summary.csv"
+SG_SUB = ART / "signals_subthemes.csv"
+SG_IDX = ART / "signals_mentions.csv"
+SG_CARDS = ART / "signal_cards.jsonl"
+
+PALETTE = {"problems": "#e74c3c", "ideas": "#f1c40f", "signals": "#3498db"}
+
+# ---------- helpers ----------
+
+def _get_query_params():
+    try:
+        return dict(st.query_params)
+    except Exception:
+        return {k: v[0] if isinstance(v, list) and v else v for k, v in st.experimental_get_query_params().items()}
+
+
+def _set_query_params(params: dict):
+    try:
+        st.query_params.clear(); st.query_params.update(params)
+    except Exception:
+        st.experimental_set_query_params(**params)
+
+
 @st.cache_data(show_spinner=False)
 def load_mentions() -> pd.DataFrame:
     if not RES_PATH.exists():
@@ -21,176 +59,469 @@ def load_mentions() -> pd.DataFrame:
     df = pd.DataFrame(js.get("mentions", []))
     if df.empty:
         return df
-    for c in ["theme","subtheme","label_type","text_quote"]:
-        if c in df.columns:
-            df[c] = df[c].fillna("")
-    if "confidence" in df.columns:
-        df["confidence"] = pd.to_numeric(df["confidence"], errors="coerce").fillna(0.0)
+    df["theme"] = df["theme"].fillna("")
+    df["subtheme"] = df["subtheme"].fillna("")
+    df["label_type"] = df["label_type"].fillna("")
+    df["text_quote"] = df["text_quote"].fillna("")
+    df["confidence"] = pd.to_numeric(df.get("confidence", 0.0), errors="coerce").fillna(0.0)
+    df["dialog_id"] = df["dialog_id"].astype(str)
     return df
 
+
 @st.cache_data(show_spinner=False)
 def load_stats() -> dict:
     if not STATS_PATH.exists():
         return {}
     return json.loads(STATS_PATH.read_text(encoding="utf-8"))
 
-# ---------- UI: sidebar ----------
-st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
+
+@st.cache_data(show_spinner=False)
+def load_artifacts(prefix: str):
+    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (summary, subthemes, mentions_idx, cards_df)
+    paths = {
+        "problems": (PM_SUM, PM_SUB, PM_IDX, PM_CARDS),
+        "ideas": (ID_SUM, ID_SUB, ID_IDX, ID_CARDS),
+        "signals": (SG_SUM, SG_SUB, SG_IDX, SG_CARDS),
+    }[prefix]
+    sum_df = pd.read_csv(paths[0]) if paths[0].exists() else pd.DataFrame()
+    sub_df = pd.read_csv(paths[1]) if paths[1].exists() else pd.DataFrame()
+    idx_df = pd.read_csv(paths[2]) if paths[2].exists() else pd.DataFrame()
+    cards_df = pd.read_json(paths[3], lines=True) if paths[3].exists() else pd.DataFrame()
+    return sum_df, sub_df, idx_df, cards_df
+
+
+def file_hash() -> str:
+    parts = []
+    for p in [RES_PATH, STATS_PATH, PM_SUM, PM_SUB, PM_IDX, PM_CARDS, ID_SUM, ID_SUB, ID_IDX, ID_CARDS, SG_SUM, SG_SUB, SG_IDX, SG_CARDS]:
+        if p.exists():
+            parts.append(f"{p.name}:{int(p.stat().st_mtime)}:{p.stat().st_size}")
+    return str(hash("|".join(parts)))
+
+
+def to_csv_bytes(df: pd.DataFrame) -> bytes:
+    buf = io.StringIO(); df.to_csv(buf, index=False)
+    return buf.getvalue().encode("utf-8")
+
+
+def to_excel_bytes(df_dict: dict) -> bytes:
+    buf = io.BytesIO()
+    with pd.ExcelWriter(buf, engine="xlsxwriter") as w:
+        for name, d in df_dict.items():
+            d.to_excel(w, sheet_name=name[:31], index=False)
+    buf.seek(0)
+    return buf.getvalue()
+
+
+def highlight_html(text: str, q: str) -> str:
+    if not q: return text
+    try:
+        import re
+        pattern = re.compile(re.escape(q), re.IGNORECASE)
+        return pattern.sub(lambda m: f"<mark>{m.group(0)}</mark>", text)
+    except Exception:
+        return text
+
+
+def prettify_table(df: pd.DataFrame) -> pd.DataFrame:
+    return df.rename(columns={
+        "dialog_id":"ID –∑–≤–æ–Ω–∫–∞",
+        "turn_id":"‚Ññ —Ä–µ–ø–ª–∏–∫–∏",
+        "label_type":"–¢–∏–ø",
+        "theme":"–¢–µ–º–∞",
+        "subtheme":"–ü–æ–¥—Ç–µ–º–∞",
+        "text_quote":"–¶–∏—Ç–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞",
+        "confidence":"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
+    })
+
+# ---------- data ----------
+
+qparams = _get_query_params()
 df = load_mentions()
 stats = load_stats()
 
+# –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
+sig = file_hash()
+if "_sig" not in st.session_state:
+    st.session_state["_sig"] = sig
+elif st.session_state["_sig"] != sig:
+    st.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—á—ë—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω.")
+    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"):
+        st.session_state["_sig"] = sig
+        st.cache_data.clear(); st.rerun()
+
+# ---------- sidebar ----------
+st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
+st.sidebar.caption("–°–ª–µ–≤–∞ –≤—ã–±–∏—Ä–∞–µ–º, —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å. –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∏–∂–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è.")
+
+metric_label = st.sidebar.radio(
+    "–ß—Ç–æ —Å—á–∏—Ç–∞–µ–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö?",
+    ["–ó–≤–æ–Ω–∫–∏ (–¥–∏–∞–ª–æ–≥–∏)", "–§—Ä–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ (—É–ø–æ–º–∏–Ω–∞–Ω–∏—è)"], index=0,
+    help="–ó–≤–æ–Ω–∫–∏ ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã. –§—Ä–∞–∑—ã ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –≤ —ç—Ç–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö."
+)
+metric_mode = "dialogs" if metric_label.startswith("–ó–≤–æ–Ω–∫–∏") else "mentions"
+metric_axis_name = "–ó–≤–æ–Ω–∫–∏" if metric_mode == "dialogs" else "–§—Ä–∞–∑—ã"
+
 label_opts = sorted(df["label_type"].unique()) if not df.empty else ["problems","ideas","signals"]
-label_sel = st.sidebar.multiselect("–¢–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π", options=label_opts, default=label_opts)
-conf_min, conf_max = st.sidebar.slider("–î–∏–∞–ø–∞–∑–æ–Ω confidence", 0.0, 1.0, (0.0, 1.0), 0.05)
-search = st.sidebar.text_input("–ü–æ–∏—Å–∫ –≤ —Ü–∏—Ç–∞—Ç–∞—Ö")
+label_default = qparams.get("labels", ",".join(label_opts)).split(",") if df.shape[0] else label_opts
+label_sel = st.sidebar.multiselect(
+    "–¢–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π",
+    options=label_opts, default=[x for x in label_default if x in label_opts],
+    help="–ü—Ä–æ–±–ª–µ–º—ã ‚Äî –∂–∞–ª–æ–±—ã; –ò–¥–µ–∏ ‚Äî –ø—Ä–æ—Å—å–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è; –°–∏–≥–Ω–∞–ª—ã ‚Äî –ø–æ–∑–∏—Ç–∏–≤/–Ω–µ–≥–∞—Ç–∏–≤/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏."
+)
+
+conf_min, conf_max = st.sidebar.slider(
+    "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (confidence)", 0.0, 1.0,
+    (float(qparams.get("cmin", 0.0)), float(qparams.get("cmax", 1.0))), 0.05,
+    help="0 ‚Äî –Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, 1 ‚Äî –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ. –û–±—ã—á–Ω–æ —Å–º–æ—Ç—Ä–∏–º ‚â• 0.6."
+)
+
+search = st.sidebar.text_input(
+    "–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º –∫–ª–∏–µ–Ω—Ç–∞",
+    value=qparams.get("q", ""),
+    help="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–ø–∏—Å–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞, –≤–æ–∑–≤—Ä–∞—Ç"
+)
 
-# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º/–ø–æ–¥—Ç–µ–º
 if not df.empty:
-    df_f = df[df["label_type"].isin(label_sel) & df["confidence"].between(conf_min, conf_max)]
-    theme_opts = sorted(df_f["theme"].unique())
-    theme_sel = st.sidebar.multiselect("–¢–µ–º—ã", options=theme_opts, default=theme_opts)
-    sub_opts = sorted(df_f[df_f["theme"].isin(theme_sel)]["subtheme"].unique())
-    sub_sel = st.sidebar.multiselect("–ü–æ–¥—Ç–µ–º—ã", options=sub_opts, default=sub_opts)
+    df_seed = df[df["label_type"].isin(label_sel) & df["confidence"].between(conf_min, conf_max)]
+    theme_opts = sorted(df_seed["theme"].unique())
+    theme_default = [t for t in qparams.get("themes", ",".join(theme_opts)).split(",") if t in theme_opts]
+    theme_sel = st.sidebar.multiselect("–¢–µ–º—ã", options=theme_opts, default=(theme_default or theme_opts), help="–ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞.")
+    sub_opts = sorted(df_seed[df_seed["theme"].isin(theme_sel)]["subtheme"].unique())
+    sub_default = [t for t in qparams.get("subs", ",".join(sub_opts)).split(",") if t in sub_opts]
+    sub_sel = st.sidebar.multiselect("–ü–æ–¥—Ç–µ–º—ã", options=sub_opts, default=(sub_default or sub_opts), help="–ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Ç–µ–º—ã.")
 else:
-    df_f = df.copy(); theme_sel = []; sub_sel = []
+    df_seed = df.copy(); theme_sel = []; sub_sel = []
 
 # –ø—Ä–∏–º–µ–Ω–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
-if not df_f.empty:
-    mask = df_f["theme"].isin(theme_sel) & df_f["subtheme"].isin(sub_sel)
+if not df_seed.empty:
+    mask = df_seed["theme"].isin(theme_sel) & df_seed["subtheme"].isin(sub_sel)
     if search.strip():
-        mask &= df_f["text_quote"].str.contains(search, case=False, regex=True)
-    df_f = df_f[mask]
+        mask &= df_seed["text_quote"].str.contains(search, case=False, regex=True)
+    df_f = df_seed[mask]
+else:
+    df_f = df_seed.copy()
+
+# –°—Å—ã–ª–∫–∞-–ø–µ—Ä–µ—Å–µ—Ç
+current_params = {
+    "labels": ",".join(label_sel),
+    "cmin": f"{conf_min}",
+    "cmax": f"{conf_max}",
+    "q": search,
+    "themes": ",".join(theme_sel),
+    "subs": ",".join(sub_sel),
+}
+share_url = "?" + urlencode(current_params)
+
+with st.sidebar.expander("–ü—Ä–µ—Å–µ—Ç—ã –∏ —à–∞—Ä–∏–Ω–≥", expanded=False):
+    st.caption("–°—Å—ã–ª–∫–∞ –Ω–∏–∂–µ –æ—Ç–∫—Ä–æ–µ—Ç —ç—Ç–æ—Ç –∂–µ —Å—Ä–µ–∑ –¥–ª—è –∫–æ–ª–ª–µ–≥.")
+    st.code(share_url, language="text")
+    if st.button("üìé –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"):
+        _set_query_params(current_params)
+    st.caption("–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.")
+
+# ---------- HEADER / KPI ----------
+st.title("–ü–∞–Ω–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ‚Äî –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º")
+st.caption("–≠—Ç–∞ –ø–∞–Ω–µ–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ —É–≤–∏–¥–µ—Ç—å, –æ —á—ë–º –≥–æ–≤–æ—Ä—è—Ç –∫–ª–∏–µ–Ω—Ç—ã: –≥–¥–µ –±–æ–ª–∏—Ç (–ø—Ä–æ–±–ª–µ–º—ã), —á—Ç–æ –ø—Ä–æ—Å—è—Ç (–∏–¥–µ–∏) –∏ –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä—É—é—Ç (—Å–∏–≥–Ω–∞–ª—ã).")
 
-# ---------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ / KPI ----------
-st.title("DialogsRAG Dashboard ‚Äî v2")
 col1, col2, col3, col4, col5 = st.columns(5)
-col1.metric("–î–∏–∞–ª–æ–≥–æ–≤", value=stats.get("dialogs", 0))
-col2.metric("–£–ø–æ–º–∏–Ω–∞–Ω–∏–π", value=stats.get("mentions", 0))
-col3.metric("Problems", value=stats.get("problems", 0))
-col4.metric("Ideas", value=stats.get("ideas", 0))
-col5.metric("Signals", value=stats.get("signals", 0))
+col1.metric("–ó–≤–æ–Ω–∫–æ–≤", value=stats.get("dialogs", 0), help="–°–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
+col2.metric("–§—Ä–∞–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤", value=stats.get("mentions", 0), help="–°–∫–æ–ª—å–∫–æ –∫—É—Å–æ—á–∫–æ–≤ —Ä–µ—á–∏ –º—ã –∏–∑–≤–ª–µ–∫–ª–∏ –∏–∑ —ç—Ç–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
+col3.metric("–ü—Ä–æ–±–ª–µ–º", value=stats.get("problems", 0))
+col4.metric("–ò–¥–µ–π", value=stats.get("ideas", 0))
+col5.metric("–°–∏–≥–Ω–∞–ª–æ–≤", value=stats.get("signals", 0))
 
 st.caption(
-    f"Evidence-100: {'‚úÖ' if stats.get('evidence_100') else '‚ùå'} ¬∑ "
-    f"–î–µ–¥—É–ø —Å–Ω—è—Ç–æ: {stats.get('dedup_removed_pct', 0)}% ¬∑ "
-    f"Ambiguity (<0.6): {stats.get('ambiguity_pct', 0)}%"
+    f"–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {'–≤—Å–µ –µ—Å—Ç—å ‚úÖ' if stats.get('evidence_100') else '–Ω–µ –≤–µ–∑–¥–µ ‚ùå'}  ‚Ä¢  "
+    f"–î—É–±–ª–∏–∫–∞—Ç—ã —Å–Ω—è—Ç—ã: {stats.get('dedup_removed_pct', 0)}%  ‚Ä¢  "
+    f"–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö (<0.6): {stats.get('ambiguity_pct', 0)}%"
 )
 
-# ---------- Tabs ----------
-
-tab_overview, tab_problems, tab_ideas, tab_signals, tab_problems_cons = st.tabs(
-    ["–û–±–∑–æ—Ä", "–ü—Ä–æ–±–ª–µ–º—ã (raw)", "–ò–¥–µ–∏ (raw)", "–°–∏–≥–Ω–∞–ª—ã (raw)", "üö´ –ü—Ä–æ–±–ª–µ–º—ã (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è)"]
-)
+# ---------- tabs ----------
+(
+    tab_overview,
+    tab_problems_raw,
+    tab_ideas_raw,
+    tab_signals_raw,
+    tab_problems_cons,
+    tab_ideas_cons,
+    tab_signals_cons,
+    tab_links,
+    tab_quality,
+) = st.tabs([
+    "–û–±–∑–æ—Ä",
+    "–ü—Ä–æ–±–ª–µ–º—ã ‚Äî —Å–ø–∏—Å–æ–∫",
+    "–ò–¥–µ–∏ ‚Äî —Å–ø–∏—Å–æ–∫",
+    "–°–∏–≥–Ω–∞–ª—ã ‚Äî —Å–ø–∏—Å–æ–∫",
+    "–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º",
+    "–°–≤–æ–¥–∫–∞ –ø–æ –∏–¥–µ—è–º",
+    "–°–≤–æ–¥–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º",
+    "–°–≤—è–∑–∏ —Ç–µ–º",
+    "–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
+])
 
 # ===== –û–±–∑–æ—Ä =====
 with tab_overview:
-    st.subheader("–¢–æ–ø —Ç–µ–º –ø–æ —Ç–∏–ø–∞–º —Å—É—â–Ω–æ—Å—Ç–µ–π")
+    st.info("""
+    **–ö–∞–∫ —á–∏—Ç–∞—Ç—å —ç–∫—Ä–∞–Ω:**
+    1) –°–ª–µ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –Ω—É–∂–Ω—ã–µ —Ç–µ–º—ã. 
+    2) –ù–∏–∂–µ —Ç—Ä–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫–∞–∂—É—Ç —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º, –∏–¥–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤. 
+    3) –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç: **–ó–≤–æ–Ω–∫–∏** (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–ª–∏ —Ç–µ–º—É) –∏–ª–∏ **–§—Ä–∞–∑—ã** (—Å–∫–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç).
+    """)
+
     if df_f.empty:
-        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
+        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–µ–≤–∞.")
     else:
-        agg = (
-            df_f.groupby(["label_type", "theme"], as_index=False)["dialog_id"].nunique()
-        ).rename(columns={"dialog_id": "dialogs"})
-        colA, colB = st.columns(2)
-        with colA:
-            st.plotly_chart(
-                px.bar(
-                    agg.sort_values(["label_type", "dialogs"], ascending=[True, False]),
-                    x="theme", y="dialogs", color="label_type",
-                    title="–î–∏–∞–ª–æ–≥–∏ –ø–æ —Ç–µ–º–∞–º",
-                ), use_container_width=True
-            )
-        with colB:
-            agg2 = (
-                df_f.groupby(["label_type", "theme", "subtheme"], as_index=False)["text_quote"].count()
-            ).rename(columns={"text_quote": "mentions"})
-            st.plotly_chart(
-                px.treemap(
-                    agg2, path=["label_type", "theme", "subtheme"], values="mentions",
-                    title="Treemap: mentions –ø–æ —Ç–∏–ø—É/—Ç–µ–º–µ/–ø–æ–¥—Ç–µ–º–µ",
-                ), use_container_width=True
+        st.subheader("–¢–æ–ø —Ç–µ–º –ø–æ —Ç–∏–ø–∞–º (—á–µ–º —á–∞—â–µ ‚Äî —Ç–µ–º –≤—ã—à–µ)")
+        topn = 8
+        def _agg(metric: str):
+            if metric == "dialogs":
+                return (
+                    df_f.groupby(["label_type", "theme"], as_index=False)["dialog_id"].nunique()
+                    .rename(columns={"dialog_id": "value"})
+                )
+            else:
+                return (
+                    df_f.groupby(["label_type", "theme"], as_index=False)["text_quote"].count()
+                    .rename(columns={"text_quote": "value"})
+                )
+        agg = _agg(metric_mode)
+        for lbl in ["problems","ideas","signals"]:
+            d = agg[agg["label_type"]==lbl].sort_values("value", ascending=False).head(topn)
+            if d.empty: 
+                st.caption(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {lbl}")
+                continue
+            title_lbl = {"problems":"–ü—Ä–æ–±–ª–µ–º—ã","ideas":"–ò–¥–µ–∏","signals":"–°–∏–≥–Ω–∞–ª—ã"}[lbl]
+            fig = px.bar(
+                d.sort_values("value"),
+                x="value", y="theme", orientation="h",
+                title=f"{title_lbl}: —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–µ–º—ã ({metric_axis_name})",
+                color_discrete_sequence=[PALETTE.get(lbl, "#777")], text="value",
             )
+            fig.update_layout(yaxis_title="–¢–µ–º–∞", xaxis_title=metric_axis_name)
+            st.plotly_chart(fig, use_container_width=True)
+        
+        st.markdown("---")
+        st.subheader("–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç —Ç–µ–º–∞ (100% —Å—Ç–æ–ª–±–∏–∫)")
+        st.caption("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ —Ç–µ–º—É ‚Äî —É–≤–∏–¥–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–¥—Ç–µ–º—ã –¥–∞—é—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥. –°—É–º–º–∞ –≤—Å–µ–≥–¥–∞ = 100%.")
+        sel_lbl = st.selectbox("–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏", ["problems","ideas","signals"], index=0)
+        themes_for_lbl = sorted(df_f[df_f["label_type"]==sel_lbl]["theme"].unique())
+        if themes_for_lbl:
+            sel_theme = st.selectbox("–¢–µ–º–∞", themes_for_lbl, index=0)
+            d = df_f[(df_f["label_type"]==sel_lbl) & (df_f["theme"]==sel_theme)]
+            by_sub = d.groupby("subtheme")["text_quote"].count().reset_index(name="mentions")
+            by_sub["share"] = (100*by_sub["mentions"]/max(1,by_sub["mentions"].sum())).round(1)
+            fig = px.bar(by_sub.sort_values("share"), x="share", y="subtheme", orientation="h",
+                         text="share", color_discrete_sequence=[PALETTE.get(sel_lbl,"#777")])
+            fig.update_layout(xaxis_title="–î–æ–ª—è, %", yaxis_title="–ü–æ–¥—Ç–µ–º–∞")
+            st.plotly_chart(fig, use_container_width=True)
+        else:
+            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç —Ç–µ–º.")
+        
+        st.markdown("---")
+        st.subheader("–ö–∞—Ä—Ç–∞ —Ç–µ–º ‚Üí –ø–æ–¥—Ç–µ–º (Treemap)")
+        st.caption("–†–∞–∑–º–µ—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ ‚Äî —Å–∫–æ–ª—å–∫–æ —Ñ—Ä–∞–∑. –ù–∞–≤–æ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
+        agg2 = (
+            df_f.groupby(["label_type", "theme", "subtheme"], as_index=False)["text_quote"].count()
+        ).rename(columns={"text_quote": "mentions"})
+        fig = px.treemap(
+            agg2, path=["label_type", "theme", "subtheme"], values="mentions",
+            color="label_type", color_discrete_map=PALETTE,
+        )
+        st.plotly_chart(fig, use_container_width=True)
 
-    st.markdown("---")
-    st.subheader("–°—ã—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)")
-    st.dataframe(
-        df_f.sort_values(["label_type", "theme", "subtheme"]).reset_index(drop=True),
-        use_container_width=True, height=420
-    )
+        st.markdown("---")
+        st.subheader("–°—ã—Ä—ã–µ —Ñ—Ä–∞–∑—ã (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º)")
+        st.caption("–≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫, –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–∏–∂–µ.")
+        hl = st.toggle("–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ–∏—Å–∫–∞ –≤ —Ü–∏—Ç–∞—Ç–∞—Ö", value=bool(search.strip()))
+        table = df_f.sort_values(["label_type","theme","subtheme"]).reset_index(drop=True)
+        if hl and search.strip():
+            t = table.copy(); t["text_quote"] = t["text_quote"].apply(lambda x: highlight_html(x, search))
+            st.markdown(prettify_table(t).to_html(escape=False, index=False), unsafe_allow_html=True)
+        else:
+            st.dataframe(prettify_table(table), use_container_width=True, height=440)
+        
+        colx, coly = st.columns(2)
+        with colx:
+            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV (—Ç–æ, —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)", data=to_csv_bytes(table), file_name="mentions_filtered.csv", mime="text/csv")
+        with coly:
+            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel", data=to_excel_bytes({"–¶–∏—Ç–∞—Ç—ã": prettify_table(table)}), file_name="mentions_filtered.xlsx",
+                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
+
+# ===== RAW =====
 
-# ===== RAW –ø—Ä–æ–±–ª–µ–º/–∏–¥–µ–π/—Å–∏–≥–Ω–∞–ª–æ–≤ =====
 def render_raw(df_src: pd.DataFrame, label: str):
+    name = {"problems":"–ü—Ä–æ–±–ª–µ–º—ã","ideas":"–ò–¥–µ–∏","signals":"–°–∏–≥–Ω–∞–ª—ã"}[label]
+    st.info(f"–ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ —Ü–∏—Ç–∞—Ç –¥–ª—è: **{name}**. –°–ª–µ–≤–∞ –º–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
     d = df_src[df_src["label_type"] == label]
     if d.empty:
-        st.info("–ù–µ—Ç —Å—Ç—Ä–æ–∫.")
+        st.warning("–ù–µ—Ç —Å—Ç—Ä–æ–∫.")
         return
-    c1, c2 = st.columns([1,2])
-    with c1:
-        top_t = d.groupby("theme")["dialog_id"].nunique().sort_values(ascending=False).head(15)
-        st.plotly_chart(px.bar(top_t, title=f"–¢–æ–ø —Ç–µ–º ‚Äî {label}"), use_container_width=True)
-    with c2:
-        top_st = d.groupby(["theme","subtheme"][1:])["text_quote"].count().sort_values(ascending=False).head(20)
-        # –Ω–µ–±–æ–ª—å—à–æ–π —Ö–∞–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
-        top_st = top_st.rename("mentions").reset_index()
-        st.plotly_chart(px.bar(top_st, x="subtheme", y="mentions", title=f"–¢–æ–ø –ø–æ–¥—Ç–µ–º ‚Äî {label}"), use_container_width=True)
+    c1, c2 = st.columns([1,1])
+    top_dialogs = d.groupby("theme")["dialog_id"].nunique().rename("–ó–≤–æ–Ω–∫–∏")
+    top_mentions = d.groupby("theme")["text_quote"].count().rename("–§—Ä–∞–∑—ã")
+    top = pd.concat([top_dialogs, top_mentions], axis=1).reset_index().fillna(0)
+    top = top.sort_values("–ó–≤–æ–Ω–∫–∏", ascending=False).head(15)
+    fig = px.bar(top.melt(id_vars="theme", value_vars=["–ó–≤–æ–Ω–∫–∏","–§—Ä–∞–∑—ã"]),
+                 x="value", y="theme", color="variable", barmode="group",
+                 orientation="h", title=f"{name}: —Ç–µ–º—ã ‚Äî –∑–≤–æ–Ω–∫–∏ vs —Ñ—Ä–∞–∑—ã")
+    fig.update_layout(xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", yaxis_title="–¢–µ–º–∞")
+    st.plotly_chart(fig, use_container_width=True)
+    
+    sub_counts = d.groupby("subtheme").size().sort_values(ascending=False).head(12)
+    top_sub = d[d["subtheme"].isin(sub_counts.index)]
+    if not top_sub.empty:
+        fig2 = px.box(top_sub, x="subtheme", y="confidence", points="outliers",
+                      title="–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ –ø–æ–¥—Ç–µ–º–∞–º (—á–µ–º –ø—Ä–∞–≤–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ)")
+        fig2.update_layout(xaxis_tickangle=30)
+        st.plotly_chart(fig2, use_container_width=True)
+    
     st.markdown("---")
-    st.dataframe(d.sort_values(["theme","subtheme","confidence"], ascending=[True,True,False]), use_container_width=True, height=480)
-
-with tab_problems:
-    render_raw(df_f, "problems")
-with tab_ideas:
-    render_raw(df_f, "ideas")
-with tab_signals:
-    render_raw(df_f, "signals")
-
-# ===== –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º =====
-with tab_problems_cons:
-    st.header("üö´ –ü—Ä–æ–±–ª–µ–º—ã (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è + —Å–∞–º–º–æ—Ä–∏)")
-    ps_path = ART / "problems_summary.csv"
-    sub_path = ART / "problems_subthemes.csv"
-    idx_path = ART / "problems_mentions.csv"
-    cards_jsonl = ART / "problem_cards.jsonl"
-
-    if not ps_path.exists():
-        st.warning("–ù–µ—Ç artifacts/problems_summary.csv ‚Äî –ø—Ä–æ–≥–æ–Ω–∏—Ç–µ consolidate_and_summarize.py")
+    st.dataframe(prettify_table(d.sort_values(["theme","subtheme","confidence"], ascending=[True,True,False])),
+                 use_container_width=True, height=480)
+
+with tab_problems_raw: render_raw(df_f, "problems")
+with tab_ideas_raw:    render_raw(df_f, "ideas")
+with tab_signals_raw:  render_raw(df_f, "signals")
+
+# ===== –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è =====
+
+def render_consolidation(prefix: str, title: str, icon: str):
+    st.header(f"{icon} {title}")
+    st.info(f"""
+    **–ó–∞—á–µ–º —ç—Ç–∞ –≤–∫–ª–∞–¥–∫–∞:** –º—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤ —É–∫—Ä—É–ø–Ω—ë–Ω–Ω—ã–µ {title.lower()}. 
+    –ù–∏–∂–µ –≤–∏–¥–Ω–æ, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ –∏ –∏–∑ –∫–∞–∫–∏—Ö –ø–æ–¥—Ç–µ–º –æ–Ω–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è.
+    """)
+    
+    sum_path = {
+        "problems": PM_SUM, "ideas": ID_SUM, "signals": SG_SUM
+    }[prefix]
+    
+    if not sum_path.exists():
+        st.warning(f"–ù–µ—Ç artifacts/{prefix}_summary.csv ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ consolidate_and_summarize.py")
     else:
-        ps = pd.read_csv(ps_path)
-        st.dataframe(ps, use_container_width=True)
-        st.plotly_chart(
-            px.bar(
-                ps.sort_values("dialogs", ascending=False).head(15),
-                x="problem_title", y="mentions",
-                hover_data=["dialogs","share_dialogs_pct","freq_per_1k","intensity_mpd"],
-                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–±–ª–µ–º",
-            ),
-            use_container_width=True,
-        )
+        sum_df, sub_df, idx_df, cards_df = load_artifacts(prefix)
+        st.subheader(f"–¢–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º {title.lower()}")
+        st.caption("–ó–≤–æ–Ω–∫–∏ ‚Äî –≤ —Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö –≤—Å–ø–ª—ã–≤–∞–ª–∞ —Ç–µ–º–∞. –§—Ä–∞–∑—ã ‚Äî —Å–∫–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö.")
+        st.dataframe(sum_df, use_container_width=True)
+        
+        st.subheader("–ö–∞–∫–∏–µ 20% –¥–∞—é—Ç 80% –æ—Ö–≤–∞—Ç–∞ (Pareto)")
+        st.caption("–°—Ç–æ–ª–±–∏–∫–∏ ‚Äî –∑–≤–æ–Ω–∫–∏, –ª–∏–Ω–∏—è ‚Äî –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ–ª—è –∑–≤–æ–Ω–∫–æ–≤, %.")
+        d = sum_df.sort_values("dialogs", ascending=False).copy()
+        d["cum_share"] = (d["dialogs"].cumsum() / max(1, d["dialogs"].sum()) * 100).round(1)
+        fig = make_subplots(specs=[[{"secondary_y": True}]])
+        fig.add_trace(go.Bar(x=d["problem_title"], y=d["dialogs"], name="–ó–≤–æ–Ω–∫–∏"), secondary_y=False)
+        fig.add_trace(go.Scatter(x=d["problem_title"], y=d["cum_share"], name="–ù–∞–∫–æ–ø–ª. –¥–æ–ª—è, %", mode="lines+markers"), secondary_y=True)
+        fig.update_layout(title_text=f"Pareto: —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ {title.lower()}", xaxis_tickangle=30)
+        fig.update_yaxes(title_text="–ó–≤–æ–Ω–∫–∏", secondary_y=False)
+        fig.update_yaxes(title_text="–î–æ–ª—è, %", secondary_y=True, range=[0, 100])
+        st.plotly_chart(fig, use_container_width=True)
 
-        st.markdown("---")
-        st.subheader("–ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–±–ª–µ–º")
-        cards = pd.read_json(cards_jsonl, lines=True) if cards_jsonl.exists() else pd.DataFrame()
-        sub = pd.read_csv(sub_path) if sub_path.exists() else pd.DataFrame()
-        idx = pd.read_csv(idx_path) if idx_path.exists() else pd.DataFrame()
-
-        for _, row in ps.sort_values("dialogs", ascending=False).iterrows():
-            pid, title = row["problem_id"], row["problem_title"]
-            with st.expander(f"{title} ‚Äî {int(row['mentions'])} —É–ø–æ–º. / {int(row['dialogs'])} –¥–∏–∞–ª–æ–≥–æ–≤ ({row['share_dialogs_pct']}%)"):
-                if not cards.empty and pid in set(cards["problem_id"]):
-                    js = cards[cards["problem_id"] == pid].iloc[0]
-                    st.markdown(f"**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.** {js.get('definition','')}")
-                    st.markdown(f"**–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ.** {js.get('why_it_matters','')}")
+        st.subheader("–ö–∞–∫ –ø–æ–¥—Ç–µ–º—ã –ø–µ—Ä–µ—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ–º—É (Sankey)")
+        st.caption("–¢–æ–ª—Å—Ç–∞—è –ª–∏–Ω–∏—è = –±–æ–ª—å—à–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –°–ª–µ–≤–∞ ‚Äî –ø–æ–¥—Ç–µ–º—ã, —Å–ø—Ä–∞–≤–∞ ‚Äî —É–∫—Ä—É–ø–Ω—ë–Ω–Ω–∞—è —Ç–µ–º–∞.")
+        if not idx_df.empty:
+            g = idx_df.groupby(["theme","subtheme","problem_id","problem_title"])['dialog_id'].nunique().reset_index(name="dialogs")
+            subs = g.apply(lambda r: f"{r['theme']} / {r['subtheme']}", axis=1).unique().tolist()
+            probs = g["problem_title"].unique().tolist()
+            nodes = subs + probs
+            idx_map = {name: i for i, name in enumerate(nodes)}
+            src = [idx_map[f"{r.theme} / {r.subtheme}"] for r in g.itertuples()]
+            dst = [idx_map[r.problem_title] for r in g.itertuples()]
+            val = [int(r.dialogs) for r in g.itertuples()]
+            sankey = go.Sankey(node=dict(label=nodes), link=dict(source=src, target=dst, value=val))
+            st.plotly_chart(go.Figure(sankey), use_container_width=True)
+        else:
+            st.info("–ù–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Ü–∏—Ç–∞—Ç –¥–ª—è Sankey.")
+
+        st.subheader("–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –ø–æ–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π (Heatmap)")
+        st.caption("–ì–¥–µ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è ‚Äî –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –æ–±–æ–≥–∞—Ç–∏—Ç—å (–ø–æ–¥—Ç–µ–º–∞ –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ç–µ–º–µ).")
+        if not idx_df.empty:
+            cov = idx_df.groupby(["theme","problem_title"])['dialog_id'].nunique().reset_index(name="dialogs")
+            pivot = cov.pivot(index="theme", columns="problem_title", values="dialogs").fillna(0)
+            fig = px.imshow(pivot, aspect="auto", color_continuous_scale="Blues", origin="lower")
+            st.plotly_chart(fig, use_container_width=True)
+        
+        if not sum_df.empty and (sum_df["problem_id"]=="other_unmapped").any():
+            unm = sum_df[sum_df["problem_id"]=="other_unmapped"].iloc[0]
+            st.warning(f"–ü—Ä–æ—á–µ–µ/–Ω–µ —Å–∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {unm['share_dialogs_pct']}% –∑–≤–æ–Ω–∫–æ–≤ ¬∑ {int(unm['mentions'])} —Ñ—Ä–∞–∑.")
+            if not idx_df.empty:
+                cand = (idx_df[idx_df["problem_id"]=="other_unmapped"]
+                        .groupby(["theme","subtheme"])['dialog_id'].nunique().reset_index(name="dialogs")
+                        .sort_values("dialogs", ascending=False).head(15))
+                st.caption("–≠—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.")
+                st.dataframe(cand, use_container_width=True)
+        
+        st.subheader(f"–ö–∞—Ä—Ç–æ—á–∫–∏ {title.lower()} ‚Äî —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º")
+        for _, row in sum_df.sort_values("dialogs", ascending=False).iterrows():
+            pid, title_text = row["problem_id"], row["problem_title"]
+            with st.expander(f"{title_text} ‚Äî {int(row['mentions'])} —Ñ—Ä–∞–∑ ¬∑ {int(row['dialogs'])} –∑–≤–æ–Ω–∫–æ–≤ ({row['share_dialogs_pct']}%)"):
+                if not cards_df.empty and pid in set(cards_df.get("problem_id", pd.Series()).values):
+                    js = cards_df[cards_df["problem_id"] == pid].iloc[0]
+                    st.markdown(f"**–û —á—ë–º —Ä–µ—á—å.** {js.get('definition','')}")
+                    st.markdown(f"**–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ.** {js.get('why_it_matters','')}")
                     motifs = js.get("common_motifs", [])
                     if isinstance(motifs, str):
-                        try:
-                            motifs = json.loads(motifs)
-                        except:
-                            motifs = [motifs]
-                    if motifs:
-                        st.markdown("**–ß–∞—Å—Ç—ã–µ –º–æ—Ç–∏–≤—ã:** " + ", ".join(motifs))
-                if not sub.empty:
+                        try: motifs = json.loads(motifs)
+                        except Exception: motifs = [motifs]
+                    if motifs: st.markdown("**–ß–∞—Å—Ç—ã–µ –º–æ—Ç–∏–≤—ã:** " + ", ".join(motifs))
+                if not sub_df.empty:
                     st.markdown("**–ü–æ–¥—Ç–µ–º—ã (—Ç–æ–ø):**")
-                    st.dataframe(sub[sub["problem_id"] == pid].head(10), use_container_width=True)
-                if not idx.empty:
-                    st.markdown("**–¶–∏—Ç–∞—Ç—ã (—Ñ—Ä–∞–≥–º–µ–Ω—Ç):**")
+                    st.dataframe(sub_df[sub_df["problem_id"] == pid].head(10), use_container_width=True)
+                if not idx_df.empty:
+                    st.markdown("**–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑:**")
                     cols = ["dialog_id","turn_id","theme","subtheme","text_quote","confidence"]
-                    st.dataframe(idx[idx["problem_id"] == pid][cols].head(50), use_container_width=True)
\ No newline at end of file
+                    st.dataframe(prettify_table(idx_df[idx_df["problem_id"] == pid][cols]).rename(columns={"ID –∑–≤–æ–Ω–∫–∞":"dialog_id"}),
+                                 use_container_width=True)
+        st.download_button(f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV —Å–æ —Å–≤–æ–¥–∫–æ–π {title.lower()}", data=to_csv_bytes(sum_df), file_name=f"{prefix}_summary.csv", mime="text/csv")
+
+with tab_problems_cons: render_consolidation("problems", "–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º", "üö´")
+with tab_ideas_cons: render_consolidation("ideas", "–°–≤–æ–¥–∫–∞ –ø–æ –∏–¥–µ—è–º", "üí°")
+with tab_signals_cons: render_consolidation("signals", "–°–≤–æ–¥–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º", "üìä")
+
+# ===== –°–≤—è–∑–∏ —Ç–µ–º =====
+with tab_links:
+    st.info("""
+    **–ß—Ç–æ –∑–¥–µ—Å—å:** –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ —Ç–µ–º—ã –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è **–≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –∑–≤–æ–Ω–∫–µ**. 
+    –ß–µ–º —Ç–µ–º–Ω–µ–µ –∫–ª–µ—Ç–∫–∞, —Ç–µ–º —á–∞—â–µ –ø–∞—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ.
+    """)
+    if df_f.empty:
+        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
+    else:
+        per_dialog = df_f.groupby(["dialog_id","theme"]).size().reset_index().drop(columns=0)
+        themes = sorted(per_dialog["theme"].unique())
+        idx_map = {t:i for i,t in enumerate(themes)}
+        n = len(themes)
+        mat = np.zeros((n,n), dtype=int)
+        for _, g in per_dialog.groupby("dialog_id"):
+            ts = sorted(set(g["theme"]))
+            for i in range(len(ts)):
+                for j in range(i, len(ts)):
+                    a, b = idx_map[ts[i]], idx_map[ts[j]]
+                    mat[a,b] += 1
+                    if a!=b: mat[b,a] += 1
+        fig = px.imshow(mat, x=themes, y=themes, aspect="auto", color_continuous_scale="Reds", origin="lower")
+        fig.update_layout(xaxis_tickangle=45)
+        st.plotly_chart(fig, use_container_width=True)
+        
+        pairs = []
+        for i in range(n):
+            for j in range(i+1, n):
+                pairs.append((themes[i], themes[j], int(mat[i,j])))
+        pairs_df = pd.DataFrame(pairs, columns=["–¢–µ–º–∞ A","–¢–µ–º–∞ B","–ó–≤–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–µ"]).sort_values("–ó–≤–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–µ", ascending=False).head(20)
+        st.dataframe(pairs_df, use_container_width=True)
+
+# ===== –ö–∞—á–µ—Å—Ç–≤–æ =====
+with tab_quality:
+    st.info("""
+    **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** —Ö–æ—Ä–æ—à–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ ‚Äî –∫–æ–≥–¥–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø—Ä–∞–≤–µ–µ 0.6. 
+    –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–ª–µ–≤–∞, —Å–º–æ—Ç—Ä–∏–º —Ç–µ–º—ã –Ω–∞ RAW‚Äë–≤–∫–ª–∞–¥–∫–∞—Ö –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞/—Ç–∞–∫—Å–æ–Ω–æ–º–∏—é.
+    """)
+    if df_f.empty:
+        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
+    else:
+        fig = px.histogram(df_f, x="confidence", color="label_type", nbins=20, barmode="overlay", color_discrete_map=PALETTE)
+        fig.update_layout(xaxis_title="–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å (0‚Ä¶1)", yaxis_title="–°–∫–æ–ª—å–∫–æ —Ñ—Ä–∞–∑")
+        st.plotly_chart(fig, use_container_width=True)
+        low = (df_f["confidence"] < 0.6).mean()*100
+        med = df_f["confidence"].median()
+        p90 = df_f["confidence"].quantile(0.9)
+        st.caption(f"–ú–µ–Ω—å—à–µ 0.6: {low:.1f}%  ‚Ä¢  –ú–µ–¥–∏–∞–Ω–∞: {med:.2f}  ‚Ä¢  90-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p90:.2f}")
\ No newline at end of file
