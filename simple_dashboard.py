# -*- coding: utf-8 -*-
import io
import json
from pathlib import Path
from urllib.parse import urlencode

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import streamlit as st

st.set_page_config(page_title="DialogsRAG ‚Äî –ø–∞–Ω–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤", layout="wide")

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏ title/id –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è DataFrame ---

def _pick(cols, *names):
    for n in names:
        if n in cols:
            return n
    return None

def pick_title_col(df):
    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç—ã
    col = _pick(df.columns, "problem_title", "idea_title", "signal_title", "title")
    if not col:
        raise KeyError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ (title).")
    return col

def pick_id_col(df):
    col = _pick(df.columns, "problem_id", "idea_id", "signal_id", "entity_id")
    if not col:
        raise KeyError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å id —Å—É—â–Ω–æ—Å—Ç–∏.")
    return col

ART = Path("artifacts")
RES_PATH = ART / "comprehensive_results.json"
STATS_PATH = ART / "statistics.json"

# –ü—Ä–æ–±–ª–µ–º—ã (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è)
PM_SUM = ART / "problems_summary.csv"
PM_SUB = ART / "problems_subthemes.csv"
PM_IDX = ART / "problems_mentions.csv"
PM_CARDS = ART / "problem_cards.jsonl"
# –ò–¥–µ–∏ (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è)
ID_SUM = ART / "ideas_summary.csv"
ID_SUB = ART / "ideas_subthemes.csv"
ID_IDX = ART / "ideas_mentions.csv"
ID_CARDS = ART / "idea_cards.jsonl"
# –°–∏–≥–Ω–∞–ª—ã (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è)
SG_SUM = ART / "signals_summary.csv"
SG_SUB = ART / "signals_subthemes.csv"
SG_IDX = ART / "signals_mentions.csv"
SG_CARDS = ART / "signal_cards.jsonl"

PALETTE = {"problems": "#e74c3c", "ideas": "#f1c40f", "signals": "#3498db"}

# ---------- helpers ----------

def _get_query_params():
    try:
        return dict(st.query_params)
    except Exception:
        return {k: v[0] if isinstance(v, list) and v else v for k, v in st.experimental_get_query_params().items()}


def _set_query_params(params: dict):
    try:
        st.query_params.clear(); st.query_params.update(params)
    except Exception:
        st.experimental_set_query_params(**params)


@st.cache_data(show_spinner=False)
def load_mentions() -> pd.DataFrame:
    if not RES_PATH.exists():
        return pd.DataFrame(columns=["dialog_id","turn_id","label_type","theme","subtheme","text_quote","confidence"])
    js = json.loads(RES_PATH.read_text(encoding="utf-8"))
    df = pd.DataFrame(js.get("mentions", []))
    if df.empty:
        return df
    df["theme"] = df["theme"].fillna("")
    df["subtheme"] = df["subtheme"].fillna("")
    df["label_type"] = df["label_type"].fillna("")
    df["text_quote"] = df["text_quote"].fillna("")
    df["confidence"] = pd.to_numeric(df.get("confidence", 0.0), errors="coerce").fillna(0.0)
    df["dialog_id"] = df["dialog_id"].astype(str)
    return df


@st.cache_data(show_spinner=False)
def load_stats() -> dict:
    if not STATS_PATH.exists():
        return {}
    return json.loads(STATS_PATH.read_text(encoding="utf-8"))


@st.cache_data(show_spinner=False)
def load_artifacts(prefix: str):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (summary, subthemes, mentions_idx, cards_df)
    paths = {
        "problems": (PM_SUM, PM_SUB, PM_IDX, PM_CARDS),
        "ideas": (ID_SUM, ID_SUB, ID_IDX, ID_CARDS),
        "signals": (SG_SUM, SG_SUB, SG_IDX, SG_CARDS),
    }[prefix]
    sum_df = pd.read_csv(paths[0]) if paths[0].exists() else pd.DataFrame()
    sub_df = pd.read_csv(paths[1]) if paths[1].exists() else pd.DataFrame()
    idx_df = pd.read_csv(paths[2]) if paths[2].exists() else pd.DataFrame()
    cards_df = pd.read_json(paths[3], lines=True) if paths[3].exists() else pd.DataFrame()
    return sum_df, sub_df, idx_df, cards_df


def file_hash() -> str:
    parts = []
    for p in [RES_PATH, STATS_PATH, PM_SUM, PM_SUB, PM_IDX, PM_CARDS, ID_SUM, ID_SUB, ID_IDX, ID_CARDS, SG_SUM, SG_SUB, SG_IDX, SG_CARDS]:
        if p.exists():
            parts.append(f"{p.name}:{int(p.stat().st_mtime)}:{p.stat().st_size}")
    return str(hash("|".join(parts)))


def to_csv_bytes(df: pd.DataFrame) -> bytes:
    buf = io.StringIO(); df.to_csv(buf, index=False)
    return buf.getvalue().encode("utf-8")


def to_excel_bytes(df_dict: dict) -> bytes:
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="xlsxwriter") as w:
        for name, d in df_dict.items():
            d.to_excel(w, sheet_name=name[:31], index=False)
    buf.seek(0)
    return buf.getvalue()


def highlight_html(text: str, q: str) -> str:
    if not q: return text
    try:
        import re
        pattern = re.compile(re.escape(q), re.IGNORECASE)
        return pattern.sub(lambda m: f"<mark>{m.group(0)}</mark>", text)
    except Exception:
        return text


def prettify_table(df: pd.DataFrame) -> pd.DataFrame:
    return df.rename(columns={
        "dialog_id":"ID –∑–≤–æ–Ω–∫–∞",
        "turn_id":"‚Ññ —Ä–µ–ø–ª–∏–∫–∏",
        "label_type":"–¢–∏–ø",
        "theme":"–¢–µ–º–∞",
        "subtheme":"–ü–æ–¥—Ç–µ–º–∞",
        "text_quote":"–¶–∏—Ç–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞",
        "confidence":"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
    })

# ---------- data ----------

qparams = _get_query_params()
df = load_mentions()
stats = load_stats()

# –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
sig = file_hash()
if "_sig" not in st.session_state:
    st.session_state["_sig"] = sig
elif st.session_state["_sig"] != sig:
    st.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—á—ë—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω.")
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"):
        st.session_state["_sig"] = sig
        st.cache_data.clear(); st.rerun()

# ---------- sidebar ----------
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
st.sidebar.caption("–°–ª–µ–≤–∞ –≤—ã–±–∏—Ä–∞–µ–º, —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å. –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–∏–∂–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è.")

metric_label = st.sidebar.radio(
    "–ß—Ç–æ —Å—á–∏—Ç–∞–µ–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö?",
    ["–ó–≤–æ–Ω–∫–∏ (–¥–∏–∞–ª–æ–≥–∏)", "–§—Ä–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ (—É–ø–æ–º–∏–Ω–∞–Ω–∏—è)"], index=0,
    help="–ó–≤–æ–Ω–∫–∏ ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã. –§—Ä–∞–∑—ã ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –≤ —ç—Ç–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö."
)
metric_mode = "dialogs" if metric_label.startswith("–ó–≤–æ–Ω–∫–∏") else "mentions"
metric_axis_name = "–ó–≤–æ–Ω–∫–∏" if metric_mode == "dialogs" else "–§—Ä–∞–∑—ã"

label_opts = sorted(df["label_type"].unique()) if not df.empty else ["problems","ideas","signals"]
label_default = qparams.get("labels", ",".join(label_opts)).split(",") if df.shape[0] else label_opts
label_sel = st.sidebar.multiselect(
    "–¢–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π",
    options=label_opts, default=[x for x in label_default if x in label_opts],
    help="–ü—Ä–æ–±–ª–µ–º—ã ‚Äî –∂–∞–ª–æ–±—ã; –ò–¥–µ–∏ ‚Äî –ø—Ä–æ—Å—å–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è; –°–∏–≥–Ω–∞–ª—ã ‚Äî –ø–æ–∑–∏—Ç–∏–≤/–Ω–µ–≥–∞—Ç–∏–≤/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏."
)

conf_min, conf_max = st.sidebar.slider(
    "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (confidence)", 0.0, 1.0,
    (float(qparams.get("cmin", 0.0)), float(qparams.get("cmax", 1.0))), 0.05,
    help="0 ‚Äî –Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, 1 ‚Äî –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ. –û–±—ã—á–Ω–æ —Å–º–æ—Ç—Ä–∏–º ‚â• 0.6."
)

search = st.sidebar.text_input(
    "–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º –∫–ª–∏–µ–Ω—Ç–∞",
    value=qparams.get("q", ""),
    help="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–ø–∏—Å–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞, –≤–æ–∑–≤—Ä–∞—Ç"
)

if not df.empty:
    df_seed = df[df["label_type"].isin(label_sel) & df["confidence"].between(conf_min, conf_max)]
    theme_opts = sorted(df_seed["theme"].unique())
    theme_default = [t for t in qparams.get("themes", ",".join(theme_opts)).split(",") if t in theme_opts]
    theme_sel = st.sidebar.multiselect("–¢–µ–º—ã", options=theme_opts, default=(theme_default or theme_opts), help="–ì—Ä—É–ø–ø–∞ –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞.")
    sub_opts = sorted(df_seed[df_seed["theme"].isin(theme_sel)]["subtheme"].unique())
    sub_default = [t for t in qparams.get("subs", ",".join(sub_opts)).split(",") if t in sub_opts]
    sub_sel = st.sidebar.multiselect("–ü–æ–¥—Ç–µ–º—ã", options=sub_opts, default=(sub_default or sub_opts), help="–ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Ç–µ–º—ã.")
else:
    df_seed = df.copy(); theme_sel = []; sub_sel = []

# –ø—Ä–∏–º–µ–Ω–∏–º —Ñ–∏–ª—å—Ç—Ä—ã
if not df_seed.empty:
    mask = df_seed["theme"].isin(theme_sel) & df_seed["subtheme"].isin(sub_sel)
    if search.strip():
        mask &= df_seed["text_quote"].str.contains(search, case=False, regex=True)
    df_f = df_seed[mask]
else:
    df_f = df_seed.copy()

# –°—Å—ã–ª–∫–∞-–ø–µ—Ä–µ—Å–µ—Ç
current_params = {
    "labels": ",".join(label_sel),
    "cmin": f"{conf_min}",
    "cmax": f"{conf_max}",
    "q": search,
    "themes": ",".join(theme_sel),
    "subs": ",".join(sub_sel),
}
share_url = "?" + urlencode(current_params)

with st.sidebar.expander("–ü—Ä–µ—Å–µ—Ç—ã –∏ —à–∞—Ä–∏–Ω–≥", expanded=False):
    st.caption("–°—Å—ã–ª–∫–∞ –Ω–∏–∂–µ –æ—Ç–∫—Ä–æ–µ—Ç —ç—Ç–æ—Ç –∂–µ —Å—Ä–µ–∑ –¥–ª—è –∫–æ–ª–ª–µ–≥.")
    st.code(share_url, language="text")
    if st.button("üìé –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"):
        _set_query_params(current_params)
    st.caption("–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.")

# ---------- HEADER / KPI ----------
st.title("–ü–∞–Ω–µ–ª—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ ‚Äî –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º")
st.caption("–≠—Ç–∞ –ø–∞–Ω–µ–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ —É–≤–∏–¥–µ—Ç—å, –æ —á—ë–º –≥–æ–≤–æ—Ä—è—Ç –∫–ª–∏–µ–Ω—Ç—ã: –≥–¥–µ –±–æ–ª–∏—Ç (–ø—Ä–æ–±–ª–µ–º—ã), —á—Ç–æ –ø—Ä–æ—Å—è—Ç (–∏–¥–µ–∏) –∏ –∫–∞–∫ —Ä–µ–∞–≥–∏—Ä—É—é—Ç (—Å–∏–≥–Ω–∞–ª—ã).")

col1, col2, col3, col4, col5 = st.columns(5)
col1.metric("–ó–≤–æ–Ω–∫–æ–≤", value=stats.get("dialogs", 0), help="–°–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
col2.metric("–§—Ä–∞–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤", value=stats.get("mentions", 0), help="–°–∫–æ–ª—å–∫–æ –∫—É—Å–æ—á–∫–æ–≤ —Ä–µ—á–∏ –º—ã –∏–∑–≤–ª–µ–∫–ª–∏ –∏–∑ —ç—Ç–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
col3.metric("–ü—Ä–æ–±–ª–µ–º", value=stats.get("problems", 0))
col4.metric("–ò–¥–µ–π", value=stats.get("ideas", 0))
col5.metric("–°–∏–≥–Ω–∞–ª–æ–≤", value=stats.get("signals", 0))

st.caption(
    f"–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {'–≤—Å–µ –µ—Å—Ç—å ‚úÖ' if stats.get('evidence_100') else '–Ω–µ –≤–µ–∑–¥–µ ‚ùå'}  ‚Ä¢  "
    f"–î—É–±–ª–∏–∫–∞—Ç—ã —Å–Ω—è—Ç—ã: {stats.get('dedup_removed_pct', 0)}%  ‚Ä¢  "
    f"–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö (<0.6): {stats.get('ambiguity_pct', 0)}%"
)

# ---------- tabs ----------
(
    tab_overview,
    tab_problems_raw,
    tab_ideas_raw,
    tab_signals_raw,
    tab_problems_cons,
    tab_ideas_cons,
    tab_signals_cons,
    tab_links,
    tab_quality,
) = st.tabs([
    "–û–±–∑–æ—Ä",
    "–ü—Ä–æ–±–ª–µ–º—ã ‚Äî —Å–ø–∏—Å–æ–∫",
    "–ò–¥–µ–∏ ‚Äî —Å–ø–∏—Å–æ–∫",
    "–°–∏–≥–Ω–∞–ª—ã ‚Äî —Å–ø–∏—Å–æ–∫",
    "–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º",
    "–°–≤–æ–¥–∫–∞ –ø–æ –∏–¥–µ—è–º",
    "–°–≤–æ–¥–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º",
    "–°–≤—è–∑–∏ —Ç–µ–º",
    "–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
])

# ===== –û–±–∑–æ—Ä =====
with tab_overview:
    st.info("""
    **–ö–∞–∫ —á–∏—Ç–∞—Ç—å —ç–∫—Ä–∞–Ω:**
    1) –°–ª–µ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –Ω—É–∂–Ω—ã–µ —Ç–µ–º—ã. 
    2) –ù–∏–∂–µ —Ç—Ä–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫–∞–∂—É—Ç —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º, –∏–¥–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤. 
    3) –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç: **–ó–≤–æ–Ω–∫–∏** (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–ª–∏ —Ç–µ–º—É) –∏–ª–∏ **–§—Ä–∞–∑—ã** (—Å–∫–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç).
    """)

    if df_f.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–µ–≤–∞.")
    else:
        st.subheader("–¢–æ–ø —Ç–µ–º –ø–æ —Ç–∏–ø–∞–º (—á–µ–º —á–∞—â–µ ‚Äî —Ç–µ–º –≤—ã—à–µ)")
        topn = 8
        def _agg(metric: str):
            if metric == "dialogs":
                return (
                    df_f.groupby(["label_type", "theme"], as_index=False)["dialog_id"].nunique()
                    .rename(columns={"dialog_id": "value"})
                )
            else:
                return (
                    df_f.groupby(["label_type", "theme"], as_index=False)["text_quote"].count()
                    .rename(columns={"text_quote": "value"})
                )
        agg = _agg(metric_mode)
        for lbl in ["problems","ideas","signals"]:
            d = agg[agg["label_type"]==lbl].sort_values("value", ascending=False).head(topn)
            if d.empty: 
                st.caption(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {lbl}")
                continue
            title_lbl = {"problems":"–ü—Ä–æ–±–ª–µ–º—ã","ideas":"–ò–¥–µ–∏","signals":"–°–∏–≥–Ω–∞–ª—ã"}[lbl]
            fig = px.bar(
                d.sort_values("value"),
                x="value", y="theme", orientation="h",
                title=f"{title_lbl}: —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–µ–º—ã ({metric_axis_name})",
                color_discrete_sequence=[PALETTE.get(lbl, "#777")], text="value",
            )
            fig.update_layout(yaxis_title="–¢–µ–º–∞", xaxis_title=metric_axis_name)
            st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("---")
        st.subheader("–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç —Ç–µ–º–∞ (100% —Å—Ç–æ–ª–±–∏–∫)")
        st.caption("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ —Ç–µ–º—É ‚Äî —É–≤–∏–¥–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–¥—Ç–µ–º—ã –¥–∞—é—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥. –°—É–º–º–∞ –≤—Å–µ–≥–¥–∞ = 100%.")
        sel_lbl = st.selectbox("–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏", ["problems","ideas","signals"], index=0)
        themes_for_lbl = sorted(df_f[df_f["label_type"]==sel_lbl]["theme"].unique())
        if themes_for_lbl:
            sel_theme = st.selectbox("–¢–µ–º–∞", themes_for_lbl, index=0)
            d = df_f[(df_f["label_type"]==sel_lbl) & (df_f["theme"]==sel_theme)]
            by_sub = d.groupby("subtheme")["text_quote"].count().reset_index(name="mentions")
            by_sub["share"] = (100*by_sub["mentions"]/max(1,by_sub["mentions"].sum())).round(1)
            fig = px.bar(by_sub.sort_values("share"), x="share", y="subtheme", orientation="h",
                         text="share", color_discrete_sequence=[PALETTE.get(sel_lbl,"#777")])
            fig.update_layout(xaxis_title="–î–æ–ª—è, %", yaxis_title="–ü–æ–¥—Ç–µ–º–∞")
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç —Ç–µ–º.")
        
        st.markdown("---")
        st.subheader("–ö–∞—Ä—Ç–∞ —Ç–µ–º ‚Üí –ø–æ–¥—Ç–µ–º (Treemap)")
        st.caption("–†–∞–∑–º–µ—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ ‚Äî —Å–∫–æ–ª—å–∫–æ —Ñ—Ä–∞–∑. –ù–∞–≤–æ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
        agg2 = (
            df_f.groupby(["label_type", "theme", "subtheme"], as_index=False)["text_quote"].count()
        ).rename(columns={"text_quote": "mentions"})
        fig = px.treemap(
            agg2, path=["label_type", "theme", "subtheme"], values="mentions",
            color="label_type", color_discrete_map=PALETTE,
        )
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("---")
        st.subheader("–°—ã—Ä—ã–µ —Ñ—Ä–∞–∑—ã (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º)")
        st.caption("–≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫, –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–∏–∂–µ.")
        hl = st.toggle("–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ–∏—Å–∫–∞ –≤ —Ü–∏—Ç–∞—Ç–∞—Ö", value=bool(search.strip()))
        table = df_f.sort_values(["label_type","theme","subtheme"]).reset_index(drop=True)
        if hl and search.strip():
            t = table.copy(); t["text_quote"] = t["text_quote"].apply(lambda x: highlight_html(x, search))
            st.markdown(prettify_table(t).to_html(escape=False, index=False), unsafe_allow_html=True)
        else:
            st.dataframe(prettify_table(table), use_container_width=True, height=440)
        
        colx, coly = st.columns(2)
        with colx:
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV (—Ç–æ, —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)", data=to_csv_bytes(table), file_name="mentions_filtered.csv", mime="text/csv")
        with coly:
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel", data=to_excel_bytes({"–¶–∏—Ç–∞—Ç—ã": prettify_table(table)}), file_name="mentions_filtered.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# ===== RAW =====

def render_raw(df_src: pd.DataFrame, label: str):
    name = {"problems":"–ü—Ä–æ–±–ª–µ–º—ã","ideas":"–ò–¥–µ–∏","signals":"–°–∏–≥–Ω–∞–ª—ã"}[label]
    st.info(f"–ó–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ —Ü–∏—Ç–∞—Ç –¥–ª—è: **{name}**. –°–ª–µ–≤–∞ –º–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
    d = df_src[df_src["label_type"] == label]
    if d.empty:
        st.warning("–ù–µ—Ç —Å—Ç—Ä–æ–∫.")
        return
    c1, c2 = st.columns([1,1])
    top_dialogs = d.groupby("theme")["dialog_id"].nunique().rename("–ó–≤–æ–Ω–∫–∏")
    top_mentions = d.groupby("theme")["text_quote"].count().rename("–§—Ä–∞–∑—ã")
    top = pd.concat([top_dialogs, top_mentions], axis=1).reset_index().fillna(0)
    top = top.sort_values("–ó–≤–æ–Ω–∫–∏", ascending=False).head(15)
    fig = px.bar(top.melt(id_vars="theme", value_vars=["–ó–≤–æ–Ω–∫–∏","–§—Ä–∞–∑—ã"]),
                 x="value", y="theme", color="variable", barmode="group",
                 orientation="h", title=f"{name}: —Ç–µ–º—ã ‚Äî –∑–≤–æ–Ω–∫–∏ vs —Ñ—Ä–∞–∑—ã")
    fig.update_layout(xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", yaxis_title="–¢–µ–º–∞")
    st.plotly_chart(fig, use_container_width=True)
    
    sub_counts = d.groupby("subtheme").size().sort_values(ascending=False).head(12)
    top_sub = d[d["subtheme"].isin(sub_counts.index)]
    if not top_sub.empty:
        fig2 = px.box(top_sub, x="subtheme", y="confidence", points="outliers",
                      title="–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ –ø–æ–¥—Ç–µ–º–∞–º (—á–µ–º –ø—Ä–∞–≤–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ)")
        fig2.update_layout(xaxis_tickangle=30)
        st.plotly_chart(fig2, use_container_width=True)
    
    st.markdown("---")
    st.dataframe(prettify_table(d.sort_values(["theme","subtheme","confidence"], ascending=[True,True,False])),
                 use_container_width=True, height=480)

with tab_problems_raw: render_raw(df_f, "problems")
with tab_ideas_raw:    render_raw(df_f, "ideas")
with tab_signals_raw:  render_raw(df_f, "signals")

# ===== –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è =====

def render_consolidation(prefix: str, title: str, icon: str):
    st.header(f"{icon} {title}")
    st.info(f"""
    **–ó–∞—á–µ–º —ç—Ç–∞ –≤–∫–ª–∞–¥–∫–∞:** –º—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤ —É–∫—Ä—É–ø–Ω—ë–Ω–Ω—ã–µ {title.lower()}. 
    –ù–∏–∂–µ –≤–∏–¥–Ω–æ, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ –∏ –∏–∑ –∫–∞–∫–∏—Ö –ø–æ–¥—Ç–µ–º –æ–Ω–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è.
    """)
    
    sum_path = {
        "problems": PM_SUM, "ideas": ID_SUM, "signals": SG_SUM
    }[prefix]
    
    if not sum_path.exists():
        st.warning(f"–ù–µ—Ç artifacts/{prefix}_summary.csv ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ consolidate_and_summarize.py")
    else:
        sum_df, sub_df, idx_df, cards_df = load_artifacts(prefix)
        st.subheader(f"–¢–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º {title.lower()}")
        st.caption("–ó–≤–æ–Ω–∫–∏ ‚Äî –≤ —Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö –≤—Å–ø–ª—ã–≤–∞–ª–∞ —Ç–µ–º–∞. –§—Ä–∞–∑—ã ‚Äî —Å–∫–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö.")
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
        title_col = pick_title_col(sum_df)
        id_col = pick_id_col(sum_df)
        
        show_cols = [id_col, title_col, "dialogs", "mentions", "share_dialogs_pct", "freq_per_1k", "intensity_mpd"]
        view = sum_df[show_cols].rename(columns={
            id_col: "id",
            title_col: "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "dialogs": "–∑–≤–æ–Ω–∫–∏",
            "mentions": "—Ñ—Ä–∞–∑—ã",
            "share_dialogs_pct": "–¥–æ–ª—è –∑–≤–æ–Ω–∫–æ–≤, %",
            "freq_per_1k": "–Ω–∞ 1000 –∑–≤–æ–Ω–∫–æ–≤",
            "intensity_mpd": "—Ñ—Ä–∞–∑ –Ω–∞ –∑–≤–æ–Ω–æ–∫",
        })
        st.dataframe(view, use_container_width=True)
        
        st.subheader("–ö–∞–∫–∏–µ 20% –¥–∞—é—Ç 80% –æ—Ö–≤–∞—Ç–∞ (Pareto)")
        st.caption("–°—Ç–æ–ª–±–∏–∫–∏ ‚Äî –∑–≤–æ–Ω–∫–∏, –ª–∏–Ω–∏—è ‚Äî –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ–ª—è –∑–≤–æ–Ω–∫–æ–≤, %.")
        d = sum_df.sort_values("dialogs", ascending=False).copy()
        d["cum_share"] = (d["dialogs"].cumsum() / max(1, d["dialogs"].sum()) * 100).round(1)
        fig = make_subplots(specs=[[{"secondary_y": True}]])
        fig.add_trace(go.Bar(x=d[title_col], y=d["dialogs"], name="–ó–≤–æ–Ω–∫–∏"), secondary_y=False)
        fig.add_trace(go.Scatter(x=d[title_col], y=d["cum_share"], name="–ù–∞–∫–æ–ø–ª. –¥–æ–ª—è, %", mode="lines+markers"), secondary_y=True)
        fig.update_layout(title_text=f"Pareto: —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ {title.lower()}", xaxis_tickangle=30)
        fig.update_yaxes(title_text="–ó–≤–æ–Ω–∫–∏", secondary_y=False)
        fig.update_yaxes(title_text="–î–æ–ª—è, %", secondary_y=True, range=[0, 100])
        st.plotly_chart(fig, use_container_width=True)

        st.subheader("–ö–∞–∫ –ø–æ–¥—Ç–µ–º—ã –ø–µ—Ä–µ—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ–º—É (Sankey)")
        st.caption("–¢–æ–ª—Å—Ç–∞—è –ª–∏–Ω–∏—è = –±–æ–ª—å—à–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –°–ª–µ–≤–∞ ‚Äî –ø–æ–¥—Ç–µ–º—ã, —Å–ø—Ä–∞–≤–∞ ‚Äî —É–∫—Ä—É–ø–Ω—ë–Ω–Ω–∞—è —Ç–µ–º–∞.")
        if not idx_df.empty:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è idx_df
            idx_title_col = pick_title_col(idx_df)
            idx_id_col = pick_id_col(idx_df)
            
            g = idx_df.groupby(["theme","subtheme", idx_id_col, idx_title_col])['dialog_id'].nunique().reset_index(name="dialogs")
            subs = g.apply(lambda r: f"{r['theme']} / {r['subtheme']}", axis=1).unique().tolist()
            probs = g[idx_title_col].unique().tolist()
            nodes = subs + probs
            idx_map = {name: i for i, name in enumerate(nodes)}
            src = [idx_map[f"{r.theme} / {r.subtheme}"] for r in g.itertuples()]
            dst = [idx_map[getattr(r, idx_title_col)] for r in g.itertuples()]
            val = [int(r.dialogs) for r in g.itertuples()]
            sankey = go.Sankey(node=dict(label=nodes), link=dict(source=src, target=dst, value=val))
            st.plotly_chart(go.Figure(sankey), use_container_width=True)
        else:
            st.info("–ù–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ —Ü–∏—Ç–∞—Ç –¥–ª—è Sankey.")

        st.subheader("–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –ø–æ–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π (Heatmap)")
        st.caption("–ì–¥–µ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è ‚Äî –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –æ–±–æ–≥–∞—Ç–∏—Ç—å (–ø–æ–¥—Ç–µ–º–∞ –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ç–µ–º–µ).")
        if not idx_df.empty:
            cov = idx_df.groupby(["theme", idx_title_col])['dialog_id'].nunique().reset_index(name="dialogs")
            pivot = cov.pivot(index="theme", columns=idx_title_col, values="dialogs").fillna(0)
            fig = px.imshow(pivot, aspect="auto", color_continuous_scale="Blues", origin="lower")
            st.plotly_chart(fig, use_container_width=True)
        
        if not sum_df.empty and (sum_df[id_col]=="other_unmapped").any():
            unm = sum_df[sum_df[id_col]=="other_unmapped"].iloc[0]
            st.warning(f"–ü—Ä–æ—á–µ–µ/–Ω–µ —Å–∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {unm['share_dialogs_pct']}% –∑–≤–æ–Ω–∫–æ–≤ ¬∑ {int(unm['mentions'])} —Ñ—Ä–∞–∑.")
            if not idx_df.empty:
                cand = (idx_df[idx_df[idx_id_col]=="other_unmapped"]
                        .groupby(["theme","subtheme"])['dialog_id'].nunique().reset_index(name="dialogs")
                        .sort_values("dialogs", ascending=False).head(15))
                st.caption("–≠—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.")
                st.dataframe(cand, use_container_width=True)
        
        st.subheader(f"–ö–∞—Ä—Ç–æ—á–∫–∏ {title.lower()} ‚Äî —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º")
        for _, row in sum_df.sort_values("dialogs", ascending=False).iterrows():
            pid, title_text = row[id_col], row[title_col]
            with st.expander(f"{title_text} ‚Äî {int(row['mentions'])} —Ñ—Ä–∞–∑ ¬∑ {int(row['dialogs'])} –∑–≤–æ–Ω–∫–æ–≤ ({row['share_dialogs_pct']}%)"):
                if not cards_df.empty and pid in set(cards_df.get(id_col, pd.Series()).values):
                    js = cards_df[cards_df[id_col] == pid].iloc[0]
                    st.markdown(f"**–û —á—ë–º —Ä–µ—á—å.** {js.get('definition','')}")
                    st.markdown(f"**–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ.** {js.get('why_it_matters','')}")
                    motifs = js.get("common_motifs", [])
                    if isinstance(motifs, str):
                        try: motifs = json.loads(motifs)
                        except Exception: motifs = [motifs]
                    if motifs: st.markdown("**–ß–∞—Å—Ç—ã–µ –º–æ—Ç–∏–≤—ã:** " + ", ".join(motifs))
                if not sub_df.empty:
                    st.markdown("**–ü–æ–¥—Ç–µ–º—ã (—Ç–æ–ø):**")
                    st.dataframe(sub_df[sub_df[id_col] == pid].head(10), use_container_width=True)
                if not idx_df.empty:
                    st.markdown("**–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑:**")
                    cols = ["dialog_id","turn_id","theme","subtheme","text_quote","confidence"]
                    st.dataframe(prettify_table(idx_df[idx_df[idx_id_col] == pid][cols]).rename(columns={"ID –∑–≤–æ–Ω–∫–∞":"dialog_id"}),
                                 use_container_width=True)
        st.download_button(f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV —Å–æ —Å–≤–æ–¥–∫–æ–π {title.lower()}", data=to_csv_bytes(sum_df), file_name=f"{prefix}_summary.csv", mime="text/csv")

with tab_problems_cons: render_consolidation("problems", "–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º", "üö´")
with tab_ideas_cons: render_consolidation("ideas", "–°–≤–æ–¥–∫–∞ –ø–æ –∏–¥–µ—è–º", "üí°")
with tab_signals_cons: render_consolidation("signals", "–°–≤–æ–¥–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º", "üìä")

# ===== –°–≤—è–∑–∏ —Ç–µ–º =====
with tab_links:
    st.info("""
    **–ß—Ç–æ –∑–¥–µ—Å—å:** –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ —Ç–µ–º—ã –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è **–≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –∑–≤–æ–Ω–∫–µ**. 
    –ß–µ–º —Ç–µ–º–Ω–µ–µ –∫–ª–µ—Ç–∫–∞, —Ç–µ–º —á–∞—â–µ –ø–∞—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ.
    """)
    if df_f.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        per_dialog = df_f.groupby(["dialog_id","theme"]).size().reset_index().drop(columns=0)
        themes = sorted(per_dialog["theme"].unique())
        idx_map = {t:i for i,t in enumerate(themes)}
        n = len(themes)
        mat = np.zeros((n,n), dtype=int)
        for _, g in per_dialog.groupby("dialog_id"):
            ts = sorted(set(g["theme"]))
            for i in range(len(ts)):
                for j in range(i, len(ts)):
                    a, b = idx_map[ts[i]], idx_map[ts[j]]
                    mat[a,b] += 1
                    if a!=b: mat[b,a] += 1
        fig = px.imshow(mat, x=themes, y=themes, aspect="auto", color_continuous_scale="Reds", origin="lower")
        fig.update_layout(xaxis_tickangle=45)
        st.plotly_chart(fig, use_container_width=True)
        
        pairs = []
        for i in range(n):
            for j in range(i+1, n):
                pairs.append((themes[i], themes[j], int(mat[i,j])))
        pairs_df = pd.DataFrame(pairs, columns=["–¢–µ–º–∞ A","–¢–µ–º–∞ B","–ó–≤–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–µ"]).sort_values("–ó–≤–æ–Ω–∫–∏ –≤–º–µ—Å—Ç–µ", ascending=False).head(20)
        st.dataframe(pairs_df, use_container_width=True)

# ===== –ö–∞—á–µ—Å—Ç–≤–æ =====
with tab_quality:
    st.info("""
    **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** —Ö–æ—Ä–æ—à–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ ‚Äî –∫–æ–≥–¥–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –ø—Ä–∞–≤–µ–µ 0.6. 
    –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Å–ª–µ–≤–∞, —Å–º–æ—Ç—Ä–∏–º —Ç–µ–º—ã –Ω–∞ RAW‚Äë–≤–∫–ª–∞–¥–∫–∞—Ö –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞/—Ç–∞–∫—Å–æ–Ω–æ–º–∏—é.
    """)
    if df_f.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        fig = px.histogram(df_f, x="confidence", color="label_type", nbins=20, barmode="overlay", color_discrete_map=PALETTE)
        fig.update_layout(xaxis_title="–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å (0‚Ä¶1)", yaxis_title="–°–∫–æ–ª—å–∫–æ —Ñ—Ä–∞–∑")
        st.plotly_chart(fig, use_container_width=True)
        low = (df_f["confidence"] < 0.6).mean()*100
        med = df_f["confidence"].median()
        p90 = df_f["confidence"].quantile(0.9)
        st.caption(f"–ú–µ–Ω—å—à–µ 0.6: {low:.1f}%  ‚Ä¢  –ú–µ–¥–∏–∞–Ω–∞: {med:.2f}  ‚Ä¢  90-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p90:.2f}")